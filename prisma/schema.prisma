// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define Event model
model Event {
  id                    Int       @id @default(autoincrement())
  title                 String
  description           String
  start_date            DateTime  @db.Timestamptz(3)
  end_date              DateTime  @db.Timestamptz(3)
  start_date_toRegister DateTime  @db.Timestamptz(3)
  end_date_toRegister   DateTime  @db.Timestamptz(3)
  mode                  EventMode // online or offline
  capacity              Int 
  tickets_remaining     Int    @default(0)
  price                 Int
  // Relationships
  organizer           UserDemo              @relation(fields: [organizer_id], references: [id])
  organizer_id        Int
  venue               Venue                 @relation(fields: [venue_id], references: [id])
  venue_id            Int
  category            Category              @relation(fields: [category_id], references: [id])
  category_id         Int
  type                Type                  @relation(fields: [type_id], references: [id])
  type_id             Int
  images              Image[] // One-to-many relation with Image model
  EventSpeakerMapping EventSpeakerMapping[]
  Booking             Booking[]
}

// Define Speaker model
model Speaker {
  id                  Int                   @id @default(autoincrement())
  name                String
  bio                 String
  email               String               
  organization        String?
  image               String?
  EventSpeakerMapping EventSpeakerMapping[]
}

// Define EventSpeakerMapping model
model EventSpeakerMapping {
  id         Int     @id @default(autoincrement())
  event      Event   @relation(fields: [event_id], references: [id], onDelete : Cascade)
  event_id   Int
  speaker    Speaker @relation(fields: [speaker_id], references: [id], onDelete : Cascade)
  speaker_id Int
}

// Define Venue model
model Venue {
  id              Int     @id @default(autoincrement())
  name            String
  latitude        Float?  @default(0.0)
  longitude       Float?  @default(0.0)
  address         String
  city            String
  state           String
  country         String
  postcode         String  @default("000000")
  google_place_id String? @default("")
  events          Event[] // One-to-many relation with Event model
}

// Define Image model
model Image {
  id           Int    @id @default(autoincrement())
  poster_image String
  event        Event  @relation(fields: [event_id], references: [id], onDelete : Cascade)
  event_id     Int
}

// Define Category model
model Category {
  id     Int     @id @default(autoincrement())
  name   String
  image  String  @default("")
  events Event[] // One-to-many relation with Event model
}

// Define Type model
model Type {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[] // One-to-many relation with Event model
}

enum EventMode {
  ONLINE
  OFFLINE
}

model UserDemo {
  id              Int     @id @default(autoincrement())
  email           String  @unique
  name            String?
  profileImage    String? @default("defaultProfileImage.png")
  mobileNumber    String? @default("")
  isAuthenticated Boolean @default(false)
  googleId        String?
  password        String?
  OTP             OTP[]
  refreshToken    String? // New field to store refresh token

  Event   Event[]
  Booking Booking[]
}

model OTP {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  createdAt DateTime @default(now())
  user      UserDemo @relation(fields: [userId], references: [id])
}

// Define Booking model
model Booking {
  id               Int      @id @default(autoincrement())
  eventId          Int
  userId           Int
  qrCodeImageUrl   String? @default("qrcode.png")
  bookingDateTime  DateTime  @db.Timestamptz(3)
  numberOfTickets  Int
  bookingStatus    String // You can use an enum for booking status (e.g., confirmed, pending, cancelled)
  paymentStatus    String // You can use an enum for payment status (e.g., paid, pending, refunded)
  paymentMethod    String // The method used for payment (e.g., credit card, PayPal)
  totalAmount      Int
  bookingReference String   @unique
  // Define relationships
  event            Event    @relation(fields: [eventId], references: [id])
  user             UserDemo @relation(fields: [userId], references: [id])
}
